extends ../layout

block content
  h1.mb-5 #{__("add_doc_title")}

  include ../partials/form_search_field.pug

  form(id="doc-form" action=`/doc/add` method="post")
    hr

    hr#form-sep.d-none

    .mb-3
      label.form-label(for="workspace") #{__("form_select_workspace")}:
      select#workspace.form-control(name="workspace")
        each workspace in workspaces
          - let workspace_label = workspace.name
          if workspace.privacy == "personal"
            - workspace_label = __("select_personal_workspace")
          if workspace.id == defaultWorkspace
            option(value=`${workspace._id}`, selected) #{workspace_label} (#{__("default")})
          else
            option(value=`${workspace._id}`) #{workspace_label}

    hr

    button(type="submit").btn.btn-primary.col-md-2.offset-md-10 #{__("submit_button")}

  include ../partials/modal_add_field.pug

  include ../partials/fields_scripts.pug

  script.
    document.addEventListener('DOMContentLoaded', function() {
      if (`!{template.info}` !== '') {
        const infos = `!{template.info}`.split(',');
        infos.forEach(info => {
          getTemplateFields(info);
        })
      }
    });

    const form = document.querySelector('#doc-form');
    form.addEventListener('submit', function(event) {
      event.preventDefault();
      
      const dicts = document.querySelectorAll('[data-type="dict"]');
      if (dicts.length > 0) {
        let errorFound = false;
        dicts.forEach((dict) => {
          const keys = dict.querySelectorAll('[data-type="key"]');
          let allKeys = [];
          keys.forEach((key) => {
            key.classList.remove('is-invalid');
            if (allKeys.includes(key.value)) {
              key.classList.add('is-invalid');
              errorFound = true;
            }
            allKeys.push(key.value);
          });
        });
        if (errorFound) {
          return;
        }
      }

      const formData = new FormData(form);
      const formDataObj = {
        'workspace': formData.get('workspace'),
        'fields': []
      }

      for (const [key, value] of formData.entries()) {
        if (key === 'id') {
          const newObj = { _id: value, fields: [] };
          formDataObj['fields'].push(newObj);
        } else if (key === 'public') {
          const lastObjIndex = formDataObj['fields'].length - 1;
          formDataObj['fields'][lastObjIndex].public = value === 'on';
        } else if (key === 'sort') {
          const lastObjIndex = formDataObj['fields'].length - 1;
          formDataObj['fields'][lastObjIndex].sort = value;
        } else if (key === 'workspace') {
          continue;
        } else {
          let elementValue = value;
          const element = document.querySelector(`[name="${key}"]`);
          if (element.tagName.toLowerCase() === 'textarea') {
            elementValue = tinymce.activeEditor.getContent(`[name="${key}"]`);
          }
          const lastObjIndex = formDataObj['fields'].length - 1;
          formDataObj['fields'][lastObjIndex].fields.push({ _id: key, value: elementValue });
        }
      }

      fetch('/doc/add', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(formDataObj)
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('Errore durante l\'invio dei dati al server');
        }
      })
      .then(data => {
        window.location.href = `/doc/${data.savedDocument._id}`;
      })
      .catch(error => {
        console.error('Errore:', error);
      });
    });
