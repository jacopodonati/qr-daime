extends ../layout

block content
  h1 #{__("list_docs")}

  - if (documents.length === 0)
    div.alert.alert-primary #{__("empty_database_message")}
  - else
    table#docTable.table.table-striped.table-hover
      thead
        tr 
          if user.permissions.manage_documents 
            th
          th ID
          th#dateHeader(data-sorting="asc") #{__("doc_date_of_issue")}
            i.ms-3.bi.bi-sort-numeric-down
          th #{__("th_workspace")}
          th #{__("th_owner")}
          th #{__("th_summary")}
          th
      each document in documents
        - let status
        - if (document.deleted)
          - status = "deleted"
        - else
          - status = "available"
        tr(data-sort=document.dateOfIssue, data-status=`${status}`)
          if user.permissions.manage_documents
            if document.deleted
              td
                i.bi.bi-trash
            else
              td 
          td
            - let doc_id = document._id.toString()
            span(title=`${document._id}`) #{doc_id.slice(-5)}
          td.date #{document.dateOfIssue}
          - if (document.workspace.privacy == "personal")
            td #{__("select_personal_workspace")}
          - else
            td #{document.workspace.name}
          td #{document.owner.username}
          td.overflow-auto.summary
            each info in document.information
              div.d-inline(class=`info-${info._id}`)
                span.fw-semibold(class=`info-${info._id}`) #{info._id} 
                each field, index in info.fields 
                  - if (index == info.fields.length - 1)
                    span(class=`field-${field._id}`) #{field._id}:
                    | #{field.value} 
                  - else
                    span(class=`field-${field._id}`) #{field._id}:
                    | #{field.value}, 

          td
            .btn-group(role="group").float-end
              if (user.permissions.manage_documents || (user.permissions.edit && (document.owner.id == user._id)))
                a(href=`/doc/edit/${document._id}`).btn.btn-success.btn-sm #{__("edit_button")}
              if (user.permissions.read_public)
                a(href=`/doc/${document._id}`).btn.btn-primary.btn-sm #{__("view_button")}
              if (!document.deleted && ((user.permissions.delete && (document.owner.id == user._id)) || user.permissions.manage_documents))
                a(href=`/doc/delete/${document._id}`).btn.btn-danger.btn-sm #{__("delete_button")}
              if (document.deleted && user.permissions.manage_documents)
                a(href=`/doc/restore/${document._id}`).btn.btn-warning.btn-sm #{__("restore_button")}
  script.
    document.addEventListener('DOMContentLoaded', function() {
      const dates = document.querySelectorAll('.date');
      dates.forEach(element => {
        const date = new Date(element.innerHTML);
        const epoch = Math.floor(date / 1000);
        element.parentElement.dataset.sort = epoch;
        const options = {
          day: 'numeric',
          month: 'numeric',
          year: 'numeric',
          hour: 'numeric',
          minute: 'numeric'
        };
        const localized = date.toLocaleString(navigator.language, options);
        element.innerHTML = localized;
      });

      const dateHeader = document.getElementById('dateHeader');
      const docTable = document.getElementById('docTable');
      const tbody = docTable.querySelector('tbody');
      const rows = Array.from(tbody.querySelectorAll('tr'));

      dateHeader.addEventListener('click', function () {
        let sorting = dateHeader.dataset.sorting === 'desc' ? 'asc' : 'desc';
        const icon = dateHeader.querySelector('i');
        icon.classList.remove('bi-sort-numeric-up', 'bi-sort-numeric-down');
        icon.classList.remove(dateHeader.dataset.sorting === 'desc' ? 'bi-sort-numeric-up' : 'bi-sort-numeric-down');
        icon.classList.add(dateHeader.dataset.sorting === 'desc' ? 'bi-sort-numeric-down' : 'bi-sort-numeric-up');
        dateHeader.dataset.sorting = sorting;
        const sortedRows = rows.sort((a, b) => {
          const dateA = a.dataset.sort;
          const dateB = b.dataset.sort;
          return sorting === 'desc' ? dateB - dateA : dateA - dateB;
        });

        while (tbody.firstChild) {
          tbody.removeChild(tbody.firstChild);
        }

        sortedRows.forEach(row => tbody.appendChild(row));
      });

      const elements = document.querySelectorAll('div[class*="info-"]');
      const infoObjects = Array.from(elements).map(element => {
        const id = element.classList[1].substring(5);
        const fields = Array.from(element.querySelectorAll('[class^="field-"]'))
          .map(field => field.classList[0].substring(6));
        return { _id: id, fields: fields };
      });
      const uniqueInfoObjects = infoObjects.reduce((acc, obj) => {
        const existing = acc.find(item => item._id === obj._id);
        if (!existing) {
          acc.push(obj);
        }
        return acc;
      }, []);

      fetch('/info/list/labels', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ infoIds: uniqueInfoObjects })
      })
      .then(response => {
        if (response.ok) {
          return response.json();
        } else {
          throw new Error('Errore durante il recupero delle label dei campi');
        }
      })
      .then(data => {
        const locale_complete = navigator.language || navigator.userLanguage;
        const locale = locale_complete.substring(0, 2);
        data.forEach(label => {
          const infoLabel = label.labels.find(label => label.locale === locale);
          const infos = document.querySelectorAll(`span.info-${label.id}`);
          infos.forEach((info) => {
            info.textContent = infoLabel.text + ' ';
          });
          label.fields.forEach((field) => {
            const fieldLabel = field.labels.find(label => label.locale === locale);
            const fields = document.querySelectorAll(`span.field-${field.id}`);
            fields.forEach((subf) => {
              subf.textContent = fieldLabel.text + ': ';
            });
          });
        })
        const tds = document.querySelectorAll('td.summary');
        tds.forEach(td => {
          td.textContent = td.textContent.replace(/<\/?[^>]+(>|$)/g, '').substring(0, 150) + 'â€¦'
        })
      })
      .catch(error => {
        console.error('Errore:', error);
      });
    });
