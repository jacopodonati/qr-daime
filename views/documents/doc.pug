ul#langSelector.nav.nav-tabs
  each loc in locales.availableLocales
    li.nav-item
      a.lang-tab.nav-link(data-lang=`${loc.code}`) #{loc.name}

each loc in locales.availableLocales
  container.localizedPanel.mt-3(data-lang=`${loc.code}`)
    p.date-of-issue.text-center.fst-italic.mb-5(data-lang=`${loc.code}`) #{document.dateOfIssue}

    each info in document.information
      if (user.permissions.manage_documents || info.public)
        - let classes = info.public ? '' : 'bg-secondary-subtle'
        - let info_title = info.labels.find(label => label.locale === loc.code);
        - let info_desc = info.descriptions.find(label => label.locale === loc.code);
        div.info(class=`${classes}`)
          h4.info-title(data-lang=`${loc.code}`, title=`${info_desc.text}`) #{info_title.text}
          ul
            each field in info.fields
              - let field_title = field.labels.find(label => label.locale === loc.code);
              - let field_desc = field.descriptions.find(label => label.locale === loc.code);
              - let field_value = field.value
              - if (field.type == 'bool')
                - field_value = __('INPUT_LBL_RADIO_' + field.value.toUpperCase())
              - if (!field.htmlSafe)
                - field_value = filters.sanitize(field.value)
              - if (field.type == 'list')
                - field_value = JSON.parse(field.value)
                li.field
                  span.field-title.fw-semibold(data-lang=`${loc.code}`, title=`${field_desc.text}`) #{field_title.text}
                  | : 
                  ul.field-value(data-lang=`${loc.code}`)
                    each value in JSON.parse(field.value)
                      li= value
              - else if (field.type == 'dict')
                - field_value = JSON.parse(field.value)
                li.field
                  span.field-title.fw-semibold(data-lang=`${loc.code}`, title=`${field_desc.text}`) #{field_title.text}
                  | : 
                  ul.field-value(data-lang=`${loc.code}`)
                    each item in JSON.parse(field.value)
                      each value, key in item
                        li #{key}: #{value}
              - else
                li.field
                  span.field-title.fw-semibold(data-lang=`${loc.code}`, title=`${field_desc.text}`) #{field_title.text}
                  | : 
                  span.field-value(data-lang=`${loc.code}`) !{field_value}

    hr.mt-5.mb-5

    .qr-url.text-center.fst-italic
      canvas
      p #{__({phrase: "doc_view_qr_link_caption", locale: loc.code})}

    hr.mt-5.mb-5

    .qr-record.text-center.fst-italic.mb-5(data-lang=`${loc.code}`)
      canvas
      p #{__({phrase: "doc_view_qr_document_caption", locale: loc.code})}
    
    p#docId.text-center #{__({phrase: "record_no", locale: loc.code})} #{document._id}

script(src="https://cdn.jsdelivr.net/npm/qrious@4.0.2/dist/qrious.min.js")
script.
  document.addEventListener('DOMContentLoaded', function() {
    function changeLocaleFocus(locale) {
      const langTabs = document.querySelectorAll('.lang-tab');
      const oldActiveTab = document.querySelector('.active')
      if (oldActiveTab) {
        oldActiveTab.classList.remove('active');
      }
      const newActiveTab = document.querySelector(`.lang-tab[data-lang*="${locale}"]`)
      newActiveTab.classList.add('active');

      const localizedPanels = document.querySelectorAll('.localizedPanel');
      localizedPanels.forEach(function(localizedPanel) {
        localizedPanel.classList.add('d-none');
      });
      const newActiveLocalizedPanel = document.querySelector(`.localizedPanel[data-lang*="${locale}"]`)
      newActiveLocalizedPanel.classList.remove('d-none');
      newActiveLocalizedPanel.classList.add('d-block');
    }

    const langTabs = document.querySelectorAll('.lang-tab');
    langTabs.forEach(function(langTab) {
      langTab.addEventListener('click', function() {
        changeLocaleFocus(this.dataset.lang)
      })
    })

    changeLocaleFocus(`!{locale}`);

    const dates = document.querySelectorAll('.date-of-issue');
    dates.forEach((date) => {
      const locale = date.dataset.lang;
      const plainDate = new Date(date.innerHTML);
      const options = {
        day: 'numeric',
        month: 'numeric',
        year: 'numeric',
        hour: 'numeric',
        minute: 'numeric'
      };
      const localized = plainDate.toLocaleString(locale, options);
      date.innerHTML = localized;
    });

    const qrUrls = document.querySelectorAll('.qr-url canvas');
    qrUrls.forEach((qrUrl) => {
      new QRious({
        element: qrUrl,
        size: 200,
        value: `${window.location.origin}${window.location.pathname}`
      });
    })

    const doc = !{JSON.stringify(document)};
    const localizedLabels = !{JSON.stringify(qrLabels)};
    const qrRecords = document.querySelectorAll('.qr-record canvas');
    qrRecords.forEach((qrRecord) => {
      const locale = qrRecord.parentElement.dataset.lang;
      let textualRecord = `${localizedLabels[locale]['record_no']} ${doc.id}\n`;
      textualRecord += `${localizedLabels[locale]['record_date_issue']}: !{document.dateOfIssue}\n`;
      textualRecord += `${localizedLabels[locale]['record_date_edit']}: !{document.lastEdit}\n`;
      textualRecord += `${localizedLabels[locale]['record_information']}:\n`;
      doc.information.forEach((info) => {
        const infoTitle = info.labels.find(label => label.locale === locale).text;
        textualRecord += `- ${infoTitle}:\n`;
        info.fields.forEach((field) => {
          const fieldTitle = field.labels.find(label => label.locale === locale).text;
          switch (field.type) {
            case 'rich':
              textualRecord += `  - ${fieldTitle}: ${field.value.replace(/<\/?[^>]+(>|$)/g, '')}\n`;
              break;
            case 'bool':
              textualRecord += `  - ${fieldTitle}: ${localizedLabels[locale][field.value]}\n`;
              break;
            case 'list':
              textualRecord += `  - ${fieldTitle}:\n`;
              const listItems = JSON.parse(field.value);
              listItems.forEach((item) => {
                textualRecord += `    - ${item}\n`;
              });
              break;
            case 'dict':
              textualRecord += `  - ${fieldTitle}:\n`;
              const dictItems = JSON.parse(field.value);
              dictItems.forEach((item) => {
                const valueKey = Object.keys(item)[0];
                textualRecord += `    - ${valueKey}: ${item[valueKey]}\n`;
              });
              break;
            default:
              textualRecord += `  - ${fieldTitle}: ${field.value}\n`;
          }
        });
      });
      console.log(`Lunghezza dati per ${locale}: ${textualRecord.length}`);

      new QRious({
        element: qrRecord,
        size: 300,
        value: textualRecord
      });
    });
  });
  